<UserControl x:Class="SimpleHardwareMonitorGUI.Items.MainWindowHeader"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:SimpleHardwareMonitorGUI.Items"
             xmlns:header="clr-namespace:SimpleHardwareMonitorGUI.Common.Header"
             mc:Ignorable="d"
             d:Width="{StaticResource WindowWidth}"
             d:Height="Auto"
             Style="{StaticResource GrayThemeUI.UserControl}">
    <UserControl.Resources>
        <ImageBrush x:Key="logImage" ImageSource="pack://application:,,,/SimpleHardwareMonitorGUI;component/resource/PhosphorIcons-HardDrivesThin.png" Stretch="Uniform"/>
        <ImageBrush x:Key="lockImage" ImageSource="pack://application:,,,/SimpleHardwareMonitorGUI;component/resource/BootstrapIcons-Lock.png" Stretch="Uniform"/>
        <ImageBrush x:Key="unlockImage" ImageSource="pack://application:,,,/SimpleHardwareMonitorGUI;component/resource/BootstrapIcons-Unlock.png" Stretch="Uniform"/>
        <ImageBrush x:Key="settingImage" ImageSource="pack://application:,,,/SimpleHardwareMonitorGUI;component/resource/PhosphorIcons-GearSixThin.png" Stretch="Uniform"/>
        <Style x:Key="LogToggleButton" TargetType="ToggleButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid>
                            <Border Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Grid>
                                    <Border x:Name="Mask" Background="#9CB45300" Width="35" Height="35" OpacityMask="{DynamicResource logImage}"/>
                                    <Border x:Name="overlayMask" Background="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Default}" Width="35" Height="35" OpacityMask="{DynamicResource logImage}"/>
                                </Grid>
                            </Border>
                            <Border x:Name="overlay" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.MouseOver}"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Mask" Property="Background" Value="#FF00FF00"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Focus}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="LockToggleButton" TargetType="ToggleButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="IsChecked" Value="{Binding MainWindowLogging, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid>
                            <Border x:Name="border" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Grid>
                                    <Border x:Name="Mask" Background="{TemplateBinding Foreground}" Width="35" Height="35" OpacityMask="{DynamicResource lockImage}"/>
                                    <Border x:Name="overlayMask" Background="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}" Width="35" Height="35" OpacityMask="{DynamicResource lockImage}"/>
                                </Grid>
                            </Border>
                            <Border x:Name="overlay" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.MouseOver}"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Mask" Property="OpacityMask" Value="{DynamicResource unlockImage}"/>
                                <Setter TargetName="overlayMask" Property="OpacityMask" Value="{DynamicResource unlockImage}"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Default}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Disable}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Disable}"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Disable}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Focus}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Theme.Foreground.Disable}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SettingButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Border x:Name="border" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                            <Grid>
                                <Border x:Name="Mask" Background="{TemplateBinding Foreground}" Width="30" Height="30" OpacityMask="{DynamicResource settingImage}"/>
                                <Border x:Name="overlayMask" Background="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Default}" Width="30" Height="30" OpacityMask="{DynamicResource settingImage}"/>
                            </Grid>
                            <Border x:Name="overlay" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.MouseOver}"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                                <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Focus}"/>
                                <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <StackPanel>
        <header:WindowHeader x:Name="WindowHeaderControl" ShowToggleMaximizeRestore="Collapsed"
                             Title="{Binding MainWindowTitle, RelativeSource={RelativeSource AncestorType=UserControl}}"
                             d:Title="{Binding MainWindowTitle, RelativeSource={RelativeSource AncestorType=UserControl}, FallbackValue='Tilte'}"
                             WindowUnlocked="{Binding MainWindowUnlocked, RelativeSource={RelativeSource AncestorType=UserControl}, Mode=TwoWay}">
            <header:WindowHeader.AddOnItem>
                <StackPanel Orientation="Horizontal">
                    <ToggleButton IsEnabled="{Binding WindowUnlocked, RelativeSource={RelativeSource AncestorType={x:Type header:WindowHeader}}}"
                                  IsChecked="{Binding MainWindowLogging, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindowHeader}}}"
                                  Style="{StaticResource LogToggleButton}" />
                    <ToggleButton Style="{StaticResource LockToggleButton}" IsChecked="{Binding WindowUnlocked, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type header:WindowHeader}}, Mode=TwoWay}"/>
                    <Button Click="Setting_Click" IsEnabled="{Binding WindowUnlocked, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type header:WindowHeader}}}" Style="{StaticResource SettingButton}"/>
                </StackPanel>
            </header:WindowHeader.AddOnItem>
        </header:WindowHeader>
    </StackPanel>
</UserControl>
